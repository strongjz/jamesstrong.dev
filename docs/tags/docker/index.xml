<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on James Strong</title>
    <link>https://jamesstrong.dev/tags/docker/</link>
    <description>Recent content in Docker on James Strong</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2024, all rights reserved.</copyright>
    <lastBuildDate>Tue, 16 May 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://jamesstrong.dev/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dockercon 2017</title>
      <link>https://jamesstrong.dev/post/2017/2017-05-16-dockercon/</link>
      <pubDate>Tue, 16 May 2017 00:00:00 +0000</pubDate>
      <guid>https://jamesstrong.dev/post/2017/2017-05-16-dockercon/</guid>
      <description>&lt;p&gt;Before we dive into some of the highlights from &lt;a href=&#34;https://2017.dockercon.com/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DockerCon 2017&lt;/a&gt;, let’s do a quick overview&#xA;of what Docker is. Quite simply, a “docker container” is a portable container, of sorts, that allows a collection of&#xA;apps to run on any operating system.&lt;/p&gt;&#xA;&lt;p&gt;How is it possible, you ask, for a docker container to allow any app to “Build, Ship and Run,” as the docker motto says,&#xA;on any OS? A docker container uses kernel features to produce resource isolation (CPU, memory, block I/O&#xA;and more) as well as separate namespaces, to isolate the application’s view of the operating system&#xA;(a visual depiction below).&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
