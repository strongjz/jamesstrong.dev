<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on James Strong</title>
    <link>https://jamesstrong.dev/tags/docker/</link>
    <description>Recent content in docker on James Strong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2023, all rights reserved.</copyright>
    <lastBuildDate>Tue, 16 May 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://jamesstrong.dev/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dockercon 2017</title>
      <link>https://jamesstrong.dev/post/2017/2017-05-16-dockercon/</link>
      <pubDate>Tue, 16 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jamesstrong.dev/post/2017/2017-05-16-dockercon/</guid>
      <description>Before we dive into some of the highlights from DockerCon 2017, let’s do a quick overview of what Docker is. Quite simply, a “docker container” is a portable container, of sorts, that allows a collection of apps to run on any operating system.
How is it possible, you ask, for a docker container to allow any app to “Build, Ship and Run,” as the docker motto says, on any OS? A docker container uses kernel features to produce resource isolation (CPU, memory, block I/O and more) as well as separate namespaces, to isolate the application’s view of the operating system (a visual depiction below).</description>
    </item>
    
  </channel>
</rss>
